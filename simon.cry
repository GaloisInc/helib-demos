// Copyright (c) 2013-2014 Galois, Inc.
// Distributed under the terms of the GPLv3 license (see LICENSE file)
//
// Cryptol specification of the Simon 64/128 block cipher
// Original Author: David Lazar
// Modified by: Brent Carmer

module Simon where

m = 4
j = 3
T = 44

encRound : [32] -> ([32], [32]) -> ([32], [32])
encRound k (x, y) = (y ^ f x ^ k, x)

decRound : [32] -> ([32], [32]) -> ([32], [32])
decRound k (x, y) = (y, x ^ f y ^ k)

f : [32] -> [32]
f x = ((x <<< 1) && (x <<< 8)) ^ (x <<< 2)

encrypt : [4][32] -> ([32], [32]) -> ([32], [32])
encrypt k0 b0 = bs ! 0
  where
    bs = [b0] # [ encRound k b | b <- bs | k <- ks ]
    ks = expandKey (reverse k0)

decrypt : [4][32] -> ([32], [32]) -> ([32], [32])
decrypt k0 b0 = bs ! 0
  where
    bs = [b0] # [ decRound k b | b <- bs | k <- reverse ks ]
    ks = expandKey (reverse k0)


expandKey : [4][32] -> [44][32]
expandKey k0 = k
  where
    k = k0 # [ r where
                    o = k @ (i - 1) >>> 3
                    p = o ^ k @ (i - 3)
                    q = p ^ p >>> 1
                    r = ~ k @ (i - 4) ^ q ^ z ^ 3
                    z = Z @ (i - 4)
             | (i : [8]) <- [4 .. 43]
             ]

Z : [62][32]
Z = [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1,
     0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,
     0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1]

property correctSimon k b = decrypt k (encrypt k b) == b
property uniqueExpandSimon k1 k2 = (k1 == k2) || (expandKey k1 != expandKey k2)

testKey = [0x1b1a1918, 0x13121110, 0x0b0a0908, 0x03020100]
testVal1 = (0x656b696c, 0x20646e75)
testVal2 = (0x44c8fc20, 0xb9dfa07a)
test1 = encrypt testKey testVal1 == testVal2
test2 = decrypt testKey testVal2 == testVal1
test  = test1 && test2

// Verify rotations

rotateLeft400 : ([400], [32]) -> [400]
rotateLeft400 (x,n) = ((x << n) || (x >> (32-n))) && (zero # 0xFFFFFFFF)


rl400True : [400] -> [32] -> Bit
property rl400True z n = n >= 32 || (rotateLeft400 (z', n) == zero # (y <<< n))
    where z' = z && (zero # 0xFFFFFFFF)
          y  = drop `{400-32} z

rotateLeft32 : ([32], [32]) -> [32]
rotateLeft32 (x,n) = (x << n) || (x >> (32 - n))

rl32True : [32] -> [32] -> Bit
property rl32True z n = n >= 32 || ((rotateLeft32 (z, n)) == z <<< n)

